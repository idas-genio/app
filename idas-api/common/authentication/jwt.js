/*
|------------------------------------------------------------------------------------------------------------------
| Author:	    TS MOGANO
| Create date:  02/03/2021
| Description:  IDAS - Genio - API - JWT authentication utilities class
|------------------------------------------------------------------------------------------------------------------
 */

/*
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Dependencies
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
const { jwtSecret } = require(`./../../config/config`);
const expressJwt = require(`express-jwt`);
const jwtTokenizer = require(`jsonwebtoken`);
const authService = require(`./../../routes/authentication/api`);
const { info, error } = require(`./../../common/logging/logger`);

/*
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| Functions
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/

const jwt = () => {
    try{
        return expressJwt({ jwtSecret, isRevoked }).unless({
            path: [
                // list of public routes that do not require authentication
                `/api/authentication/loginSso`,
                `/api/authentication/login`
            ]
        });
    }catch(err){
        error(__filename, `jwt`, `An error has occured`, err);
    }finally{}
}

const isRevoked = async (req, payload, done) => {
    try{
        const user = authService.getLoggedInUser(payload.sub);

        // revoke token if user no longer exists
        if (!user) {
            return done(null, true);
        }

        done();
    }catch(err){
        error(__filename, `isRevoked`, `An error has occured`, err);
    }finally{}
}

const createSessionToken = (uid) => {
    try{
        return (uid) ? jwtTokenizer.sign({ sub: `${uid}|${(new Date())}` }, jwtSecret) : null;        
    }catch(err){
        error(__filename, `getConnection`, `An error has occured`, err);
    }finally{}
}

/*
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
| module exports
|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*/
module.exports = {
    jwt: jwt,
    isRevoked: isRevoked,
    createSessionToken: createSessionToken
}
